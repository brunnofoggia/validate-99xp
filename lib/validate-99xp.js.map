{"version":3,"file":"validate-99xp.js","sources":["../src/validate-99xp.js"],"sourcesContent":["// [validate-99xp](https://github.com/brunnofoggia/validate-99xp) is the automated way\n// to keep your json or model attributes valid. See [v8n-99xp](https://github.com/brunnofoggia/v8n-99xp)\n// and [v8n](https://imbrn.github.io/v8n/) to know more about validators available.\n\n\n// Instructions\n// --------------\n\n// To make a field mandatory set it equal to [] or set your rules instead\n\n//     var validations = { name: [] }\n\n//     var validations = { name: [ [v8n().fullname(), 'Enter your fullname'] ] }\n\n// To make a field not mandatory you can either no list it in your stack of field validations of set it to false\n\n//     var validations = { name: false }\n\n// Advanced topics: \n\n// 1. You can also send a function for validations so you can define your rules according to values received\n\n// 2. On rule array you can send a third value that is called \"getValue\".\n// That will be a function responsible for return a value to be validated for that field \n\n//     var validations = { name: [ [v8n().fullname(), 'Enter your fullname', ()=>{ return 'any other variable'; }] ] }\n\n// 3. If you want to test a value received in realtime from user input set validateAll to false\n\n//     vl.validate({ name: '99xp' }, {validateAll: false})\n\n// 4. Complex objects works well too.\n\n//     var json = {name: '99xp', contacts: [ {email: 'team@99xp.org'} , {email: 'admin@99xp.org'} ]};\n//     var validations = {name: [], 'contacts[][email]': []};\n//     vl.validate(json, {validations})\n\n// Examples\n// --------------\n\n//     - simple validation\n//     var validations = { name: [ [v8n().fullname(), 'Enter your fullname'] ] }\n//     var json = { name: 'bruno' }\n//     var r;\n//     if((r = vl.validate(json, {validations}))!==null) {\n//          console.log(r);\n//     }\n\n//     - making a field just mandatory\n//     var validations = { name: [] }\n//     var json = { name: 'bruno' }\n//     var r;\n//     if((r = vl.validate(json, {validations}))!==null) {\n//          console.log(r);\n//     }\n\n\n// CODE DOCUMENTED BELOW\n// --------------\n\n// --------------\n\n// Baseline setup\n// --------------\nimport v8n from 'v8n-99xp';\nimport _ from 'underscore-99xp';\n\nvar vl = {\n    validator: v8n,\n    deepValueSearch: _.deepValueSearch,\n    validateAll: true,\n    // Core method the walk through fields and their set of rules applying each one of them\n    validate(attrs, options = {}) {\n        options = _.defaults(options, {\n            validateAll: this.validateAll,\n            validations: {}\n        });\n        var error = [],\n            validations = _.result2(this, 'validations', options.validations, [attrs, options], this),\n            isRequired = {};\n\n        // walk through fields listed as required\n        for (let field in validations) {\n            isRequired[field] = true;\n            var value = this.deepValueSearch(field, attrs);\n            // working with array so we can validate lists like \"contacts[][email]\"\n            !_.isArray(value) && (value = [value]);\n\n            // walk through field rule specifications\n            for (let x in validations[field]) {\n                let validation = validations[field][x];\n\n                if (typeof validation === 'boolean') {\n                    isRequired[field] = validation;\n                    continue;\n                }\n\n                error = error.concat(this.validateValues(value, isRequired[field], options.validateAll, field, attrs, validation));\n            }\n\n            // validate fields specified as required but without rule specification\n            var firstValue = _.isArray(value) ? _.first(value) : value;\n            if ((!validations[field].length || (validations[field].length === 1 && typeof validations[field][0] === 'boolean')) &&\n                this.isRequiredNow(firstValue, isRequired[field], options.validateAll) &&\n                !this.validator().minLength(1).test(firstValue, attrs, field)) {\n                error.push([field, _.template(this.requiredErrorMessage)({\n                    field\n                })]);\n            }\n        }\n\n        return error.length > 0 ? error : null;\n    },\n    validateValues(value, isRequired, validateAll, field, attrs, validation) {\n        var error = [];\n        for (var x in value) {\n            error = error.concat(this.validateValue(x, value[x], isRequired, validateAll, field, attrs, validation));\n        }\n\n        return error;\n    },\n    validateValue(x, value, isRequired, validateAll, field, attrs, validation) {\n        var error = [];\n        let validationValue = this.getValidationValue(validation, value, attrs, field);\n        if (this.isRequiredNow(validationValue, isRequired, validateAll) &&\n            !this.isValid(field, attrs, validation[0], validationValue)) {\n            error.push([field, validation[1], x]);\n        }\n\n        return error;\n    },\n    getValidationValue(validation, value, attrs, field) {\n        if (!validation[2] || typeof validation[2] !== 'function') {\n            return value;\n        }\n        return validation[2](value, attrs, field);\n    },\n    // A field will be required when its present in the set of rules - even if its value is an empty [] - \n    // AND (its present in the values received OR (its set as required and validate all was set true)) . \n    // A bit confusing I know. But this will allow you to run validate in your form everytime a field is changed avoiding\n    // to alert of invalid fields that yet weren't filled by the guest\n    isRequiredNow(input, fieldRequired = false, validateAll) {\n        // the field will be required only if its value was sent or if its set as required (even without a specific rule)\n        return (typeof input !== 'undefined') || (!!fieldRequired && !!validateAll);\n    },\n    // Apply the rule test to value received. value, attrs inputted and field name are sent to validation method - it can be handy.\n    isValid(field, attrs, validation, value) {\n        if (!validation.test(value)) {\n            return false;\n        }\n        return true;\n    },\n    requiredErrorMessage: 'Field *{{field}}* cannot be empty'\n};\n\nexport default vl;\n"],"names":["vl","validator","v8n","deepValueSearch","_","validateAll","validate","attrs","options","defaults","validations","error","result2","isRequired","field","value","isArray","x","validation","concat","validateValues","firstValue","first","length","isRequiredNow","minLength","test","push","template","requiredErrorMessage","validateValue","validationValue","getValidationValue","isValid","input","fieldRequired"],"mappings":"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"}