{"version":3,"file":"validate-99xp.min.js","sources":["../src/validate-99xp.js"],"sourcesContent":["// [validate-99xp](https://github.com/brunnofoggia/validate-99xp) is the automated way\n// to keep your json or model attributes valid. See [v8n-99xp](https://github.com/brunnofoggia/v8n-99xp)\n// and [v8n](https://imbrn.github.io/v8n/) to know more about validators available.\n\n\n// Instructions\n// --------------\n\n// To make a field mandatory set it equal to [] or set your rules instead\n\n//     var validations = { name: [] }\n\n//     var validations = { name: [ [v8n().fullname(), 'Enter your fullname'] ] }\n\n// To make a field not mandatory you can either no list it in your stack of field validations of set it to false\n\n//     var validations = { name: false }\n\n// Advanced topics: \n\n// 1. You can also send a function for validations so you can define your rules according to values received\n\n// 2. On rule array you can send a third value that is called \"getValue\".\n// That will be a function responsible for return a value to be validated for that field \n\n//     var validations = { name: [ [v8n().fullname(), 'Enter your fullname', ()=>{ return 'any other variable'; }] ] }\n\n// 3. If you want to test a value received in realtime from user input set validateAll to false\n\n//     vl.validate({ name: '99xp' }, {validateAll: false})\n\n// 4. Complex objects works well too.\n\n//     var json = {name: '99xp', contacts: [ {email: 'team@99xp.org'} , {email: 'admin@99xp.org'} ]};\n//     var validations = {name: [], 'contacts[][email]': []};\n//     vl.validate(json, {validations})\n\n// Examples\n// --------------\n\n//     - simple validation\n//     var validations = { name: [ [v8n().fullname(), 'Enter your fullname'] ] }\n//     var json = { name: 'bruno' }\n//     var r;\n//     if((r = vl.validate(json, {validations}))!==null) {\n//          console.log(r);\n//     }\n\n//     - making a field just mandatory\n//     var validations = { name: [] }\n//     var json = { name: 'bruno' }\n//     var r;\n//     if((r = vl.validate(json, {validations}))!==null) {\n//          console.log(r);\n//     }\n\n\n// CODE DOCUMENTED BELOW\n// --------------\n\n// --------------\n\n// Baseline setup\n// --------------\nimport v8n from 'v8n-99xp';\nimport _ from 'underscore-99xp';\n\nvar vl = {\n    validator: v8n,\n    deepValueSearch: _.deepValueSearch,\n    validateAll: true,\n    // Core method the walk through fields and their set of rules applying each one of them\n    validate(attrs, options = {}) {\n        options = _.defaults(options, {\n            validateAll: this.validateAll\n        });\n\n        var error = [],\n            validations = this.getValidations(attrs, options),\n            notEmptyValidation = this.validator().passesAnyOf(this.validator().minLength(1), this.validator().not.undefined().not.null().pattern(/.+/)),\n            isRequired = {}; \n\n        // walk through fields listed as required\n        for (let field in validations) {\n            isRequired[field] = true;\n            var value = this.deepValueSearch(field, attrs, true);\n\n            // working with array so we can validate lists like \"contacts[][email]\"\n            (\n                (!_.isArray(value) && !_.isJSON(value)) ||\n                (!/\\[\\]\\[\\w+\\]/.test(field) && _.isArray(value)) // ensure to pass the correct value to test length of lists\n            ) && (value = [value]);\n            !_.isArray(validations[field]) && (validations[field] = [validations[field]]);\n\n            // walk through field rule specifications\n            for (let x in validations[field]) {\n                let validation = validations[field][x];\n\n                if (typeof validation[0] === 'boolean' || typeof validation[0] === 'undefined') {\n                    isRequired[field] = !(validation === false);\n                    if (!isRequired[field]) { continue; }\n                    // if is required, set default validation and error message for it\n                    validation = [notEmptyValidation, validation[1] || this.getRequiredErrorMessage(field), validation[2] || null];\n                }\n\n                error = error.concat(this.validateValues(value, isRequired[field], options.validateAll, field, attrs, validation));\n            }\n        }\n\n        return error.length > 0 ? error : null;\n    },\n    validateValues(value, isRequired, validateAll, field, attrs, validation) {\n        var error = [];\n        for (var x in value) {\n            error = error.concat(this.validateValue(x, value[x], isRequired, validateAll, field, attrs, validation));\n        }\n\n        return error;\n    },\n    validateValue(x, value, isRequired, validateAll, field, attrs, validation) {\n        var error = [];\n        let validationValue = this.getValidationValue(validation, value, attrs, field);\n        if (this.isRequiredNow(validationValue, isRequired, validateAll) &&\n            !this.isValid(field, attrs, validation[0], validationValue)) {\n            error.push([field, validation[1], x]);\n        }\n\n        return error;\n    },\n    getValidationValue(validation, value, attrs, field) {\n        if (!validation[2] || typeof validation[2] !== 'function') {\n            return value;\n        }\n        return validation[2](value, attrs, field);\n    },\n    getValidations(attrs, options = {}) {\n        var definedValidations = _.result2(this, 'validations', {}, [attrs, options], this),\n            validations = _.result2(options, 'validations', definedValidations, [attrs, options], this);\n\n        return validations;\n    },\n    // Run through all validations to collect mandatory fields and validations\n    getMandatoryValidations(attrs, options = {}) {\n        var validations = this.getValidations(attrs, options), mandatory = {};\n\n        // walk through fields listed as required\n        for (let field in validations) {\n            !_.isArray(validations[field]) && (validations[field] = [validations[field]]);\n            // walk through field rule specifications\n            for (let x in validations[field]) {\n                let validation = validations[field][x];\n                if (typeof validation[0] === 'undefined' || \n                    (typeof validation[0] === 'boolean' && validation[0] !== false) || \n                    (typeof validation[0] === 'object' && !validation[0].test(''))) {\n                    !(field in mandatory) && (mandatory[field] = []);\n                    mandatory[field].push(validation);\n                }\n            }\n        }\n\n        return mandatory;\n    },\n    // A field will be required when its present in the set of rules - even if its value is an empty [] - \n    // AND (its present in the values received OR (its set as required and validate all was set true)) . \n    // A bit confusing I know. But this will allow you to run validate in your form everytime a field is changed avoiding\n    // to alert of invalid fields that yet weren't filled by the guest\n    isRequiredNow(input, fieldRequired = false, validateAll) {\n        // the field will be required only if its value was sent or if its set as required (even without a specific rule)\n        return (typeof input !== 'undefined') || (!!fieldRequired && !!validateAll);\n    },\n    // Apply the rule test to value received. value, attrs inputted and field name are sent to validation method - it can be handy.\n    isValid(field, attrs, validation, value) {\n        if (!validation.test(value)) {\n            return false;\n        }\n        return true;\n    },\n    requiredErrorMessage: 'Field *{{field}}* cannot be empty',\n    getRequiredErrorMessage(field) {\n      return _.template(this.requiredErrorMessage)({\n          field\n        });\n    },\n};\n\nexport default vl;\n"],"names":["vl","validator","deepValueSearch","validateAll","validate","attrs","options","_","defaults","this","error","validations","getValidations","notEmptyValidation","passesAnyOf","minLength","not","undefined","null","pattern","isRequired","field","value","isArray","isJSON","test","x","validation","getRequiredErrorMessage","concat","validateValues","length","validateValue","validationValue","getValidationValue","isRequiredNow","isValid","push","definedValidations","result2","getMandatoryValidations","mandatory","input","fieldRequired","requiredErrorMessage","template"],"mappings":"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"}