{"version":3,"file":"validate-99xp.min.js","sources":["../src/validate-99xp.js"],"sourcesContent":["// [validate-99xp](https://github.com/brunnofoggia/validate-99xp) is the automated way\n// to keep your json or model attributes valid. See [v8n-99xp](https://github.com/brunnofoggia/v8n-99xp)\n// and [v8n](https://imbrn.github.io/v8n/) to know more about validators available.\n\n\n// Instructions\n// --------------\n\n// To make a field mandatory set it equal to [] or set your rules instead\n\n//     var validations = { name: [] }\n\n//     var validations = { name: [ [v8n().fullname(), 'Enter your fullname'] ] }\n\n// To make a field not mandatory you can either no list it in your stack of field validations of set it to false\n\n//     var validations = { name: false }\n\n// Advanced topics: \n\n// 1. You can also send a function for validations so you can define your rules according to values received\n\n// 2. On rule array you can send a third value that is called \"getValue\".\n// That will be a function responsible for return a value to be validated for that field \n\n//     var validations = { name: [ [v8n().fullname(), 'Enter your fullname', ()=>{ return 'any other variable'; }] ] }\n\n// 3. If you want to test a value received in realtime from user input set validateAll to false\n\n//     vl.validate({ name: '99xp' }, {validateAll: false})\n\n// 4. Complex objects works well too.\n\n//     var json = {name: '99xp', contacts: [ {email: 'team@99xp.org'} , {email: 'admin@99xp.org'} ]};\n//     var validations = {name: [], 'contacts[][email]': []};\n//     vl.validate(json, {validations})\n\n// Examples\n// --------------\n\n//     - simple validation\n//     var validations = { name: [ [v8n().fullname(), 'Enter your fullname'] ] }\n//     var json = { name: 'bruno' }\n//     var r;\n//     if((r = vl.validate(json, {validations}))!==null) {\n//          console.log(r);\n//     }\n\n//     - making a field just mandatory\n//     var validations = { name: [] }\n//     var json = { name: 'bruno' }\n//     var r;\n//     if((r = vl.validate(json, {validations}))!==null) {\n//          console.log(r);\n//     }\n\n\n// CODE DOCUMENTED BELOW\n// --------------\n\n// --------------\n\n// Baseline setup\n// --------------\nimport v8n from 'v8n-99xp';\nimport _ from 'underscore-99xp';\n\nvar vl = {\n    validator: v8n,\n    deepValueSearch: _.deepValueSearch,\n    validateAll: true,\n    // Core method the walk through fields and their set of rules applying each one of them\n    validate(attrs, options = {}) {\n        options = _.defaults(options, {\n            validateAll: this.validateAll\n        });\n\n        var error = [],\n        definedValidations = _.result2(this, 'validations', {}, [attrs, options], this),\n        validations = _.result2(options, 'validations', definedValidations, [attrs, options], this),\n            isRequired = {}; \n\n        // walk through fields listed as required\n        for (let field in validations) {\n            isRequired[field] = true;\n            var value = this.deepValueSearch(field, attrs, true);\n\n            // working with array so we can validate lists like \"contacts[][email]\"\n            !_.isArray(value) && !_.isJSON(value) && (value = [value]);\n\n            // walk through field rule specifications\n            for (let x in validations[field]) {\n                let validation = validations[field][x];\n\n                if (typeof validation === 'boolean') {\n                    isRequired[field] = validation;\n                    continue;\n                }\n\n                error = error.concat(this.validateValues(value, isRequired[field], options.validateAll, field, attrs, validation));\n            }\n\n            // validate fields specified as required but without rule specification\n            var firstValue = _.isArray(value) ? _.first(value) : value;\n            if ((!validations[field].length || (validations[field].length === 1 && typeof validations[field][0] === 'boolean')) && \n                this.isRequiredNow(firstValue, isRequired[field], options.validateAll) && \n                !this.validator().minLength(1).test(firstValue, attrs, field)) {\n                error.push([field, _.template(this.requiredErrorMessage)({\n                    field\n                })]);\n            }\n        }\n\n        return error.length > 0 ? error : null;\n    },\n    validateValues(value, isRequired, validateAll, field, attrs, validation) {\n        var error = [];\n        for (var x in value) {\n            error = error.concat(this.validateValue(x, value[x], isRequired, validateAll, field, attrs, validation));\n        }\n\n        return error;\n    },\n    validateValue(x, value, isRequired, validateAll, field, attrs, validation) {\n        var error = [];\n        let validationValue = this.getValidationValue(validation, value, attrs, field);\n        if (this.isRequiredNow(validationValue, isRequired, validateAll) &&\n            !this.isValid(field, attrs, validation[0], validationValue)) {\n            error.push([field, validation[1], x]);\n        }\n\n        return error;\n    },\n    getValidationValue(validation, value, attrs, field) {\n        if (!validation[2] || typeof validation[2] !== 'function') {\n            return value;\n        }\n        return validation[2](value, attrs, field);\n    },\n    // A field will be required when its present in the set of rules - even if its value is an empty [] - \n    // AND (its present in the values received OR (its set as required and validate all was set true)) . \n    // A bit confusing I know. But this will allow you to run validate in your form everytime a field is changed avoiding\n    // to alert of invalid fields that yet weren't filled by the guest\n    isRequiredNow(input, fieldRequired = false, validateAll) {\n        // the field will be required only if its value was sent or if its set as required (even without a specific rule)\n        return (typeof input !== 'undefined') || (!!fieldRequired && !!validateAll);\n    },\n    // Apply the rule test to value received. value, attrs inputted and field name are sent to validation method - it can be handy.\n    isValid(field, attrs, validation, value) {\n        if (!validation.test(value)) {\n            return false;\n        }\n        return true;\n    },\n    requiredErrorMessage: 'Field *{{field}}* cannot be empty'\n};\n\nexport default vl;\n"],"names":["vl","validator","deepValueSearch","validateAll","validate","attrs","options","_","defaults","this","error","definedValidations","result2","validations","isRequired","field","value","isArray","isJSON","x","validation","concat","validateValues","firstValue","first","length","isRequiredNow","minLength","test","push","template","requiredErrorMessage","validateValue","validationValue","getValidationValue","isValid","input","fieldRequired"],"mappings":";;;;;;;;;;;yRAmEA,IAAIA,EAAK,CACLC,uDACAC,+DAAmBA,gBACnBC,aAAa,EAEbC,SAASC,EAAOC,EAAU,IACtBA,EAAUC,EAAEC,SAASF,EAAS,CAC1BH,YAAaM,KAAKN,kBAGlBO,EAAQ,GACZC,EAAqBJ,EAAEK,QAAQH,KAAM,cAAe,GAAI,CAACJ,EAAOC,GAAUG,MAC1EI,EAAcN,EAAEK,QAAQN,EAAS,cAAeK,EAAoB,CAACN,EAAOC,GAAUG,MAClFK,EAAa,OAGZ,IAAIC,KAASF,EAAa,CAC3BC,EAAWC,IAAS,MAChBC,EAAQP,KAAKP,gBAAgBa,EAAOV,GAAO,IAG9CE,EAAEU,QAAQD,KAAWT,EAAEW,OAAOF,KAAWA,EAAQ,CAACA,QAG9C,IAAIG,KAAKN,EAAYE,GAAQ,KAC1BK,EAAaP,EAAYE,GAAOI,GAEV,kBAAfC,EAKXV,EAAQA,EAAMW,OAAOZ,KAAKa,eAAeN,EAAOF,EAAWC,GAAQT,EAAQH,YAAaY,EAAOV,EAAOe,IAJlGN,EAAWC,GAASK,MAQxBG,EAAahB,EAAEU,QAAQD,GAAST,EAAEiB,MAAMR,GAASA,EAC/CH,EAAYE,GAAOU,SAAyC,IAA9BZ,EAAYE,GAAOU,QAAiD,kBAA1BZ,EAAYE,GAAO,MAC7FN,KAAKiB,cAAcH,EAAYT,EAAWC,GAAQT,EAAQH,cACzDM,KAAKR,YAAY0B,UAAU,GAAGC,KAAKL,EAAYlB,EAAOU,IACvDL,EAAMmB,KAAK,CAACd,EAAOR,EAAEuB,SAASrB,KAAKsB,qBAAhBxB,CAAsC,CACrDQ,MAAAA,aAKLL,EAAMe,OAAS,EAAIf,EAAQ,MAEtCY,eAAeN,EAAOF,EAAYX,EAAaY,EAAOV,EAAOe,OACrDV,EAAQ,OACP,IAAIS,KAAKH,EACVN,EAAQA,EAAMW,OAAOZ,KAAKuB,cAAcb,EAAGH,EAAMG,GAAIL,EAAYX,EAAaY,EAAOV,EAAOe,WAGzFV,GAEXsB,cAAcb,EAAGH,EAAOF,EAAYX,EAAaY,EAAOV,EAAOe,OACvDV,EAAQ,OACRuB,EAAkBxB,KAAKyB,mBAAmBd,EAAYJ,EAAOX,EAAOU,UACpEN,KAAKiB,cAAcO,EAAiBnB,EAAYX,KAC/CM,KAAK0B,QAAQpB,EAAOV,EAAOe,EAAW,GAAIa,IAC3CvB,EAAMmB,KAAK,CAACd,EAAOK,EAAW,GAAID,IAG/BT,GAEXwB,mBAAkB,CAACd,EAAYJ,EAAOX,EAAOU,IACpCK,EAAW,IAA+B,mBAAlBA,EAAW,GAGjCA,EAAW,GAAGJ,EAAOX,EAAOU,GAFxBC,EAQfU,cAAa,CAACU,EAAOC,GAAgB,EAAOlC,SAEf,IAAViC,KAA6BC,KAAmBlC,EAGnEgC,QAAO,CAACpB,EAAOV,EAAOe,EAAYJ,MACzBI,EAAWQ,KAAKZ,GAKzBe,qBAAsB"}