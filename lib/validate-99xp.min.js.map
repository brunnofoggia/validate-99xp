{"version":3,"file":"validate-99xp.min.js","sources":["../src/validate-99xp.js"],"sourcesContent":["// [validate-99xp](https://github.com/brunnofoggia/validate-99xp) is the automated way\n// to keep your json or model attributes valid. See [v8n-99xp](https://github.com/brunnofoggia/v8n-99xp)\n// and [v8n](https://imbrn.github.io/v8n/) to know more about validators available.\n\n\n// Instructions\n// --------------\n\n// To make a field mandatory set it equal to [] or set your rules instead\n\n//     var validations = { name: [] }\n\n//     var validations = { name: [ [v8n().fullname(), 'Enter your fullname'] ] }\n\n// To make a field not mandatory you can either no list it in your stack of field validations of set it to false\n\n//     var validations = { name: false }\n\n// Advanced topics: \n\n// 1. You can also send a function for validations so you can define your rules according to values received\n\n// 2. On rule array you can send a third value that is called \"getValue\".\n// That will be a function responsible for return a value to be validated for that field \n\n//     var validations = { name: [ [v8n().fullname(), 'Enter your fullname', ()=>{ return 'any other variable'; }] ] }\n\n// 3. If you want to test a value received in realtime from user input set validateAll to false\n\n//     vl.validate({ name: '99xp' }, {validateAll: false})\n\n// 4. Complex objects works well too.\n\n//     var json = {name: '99xp', contacts: [ {email: 'team@99xp.org'} , {email: 'admin@99xp.org'} ]};\n//     var validations = {name: [], 'contacts[][email]': []};\n//     vl.validate(json, {validations})\n\n// Examples\n// --------------\n\n//     - simple validation\n//     var validations = { name: [ [v8n().fullname(), 'Enter your fullname'] ] }\n//     var json = { name: 'bruno' }\n//     var r;\n//     if((r = vl.validate(json, {validations}))!==null) {\n//          console.log(r);\n//     }\n\n//     - making a field just mandatory\n//     var validations = { name: [] }\n//     var json = { name: 'bruno' }\n//     var r;\n//     if((r = vl.validate(json, {validations}))!==null) {\n//          console.log(r);\n//     }\n\n\n// CODE DOCUMENTED BELOW\n// --------------\n\n// --------------\n\n// Baseline setup\n// --------------\nimport v8n from 'v8n-99xp';\nimport _ from 'underscore-99xp';\n\nvar vl = {\n    validator: v8n,\n    deepValueSearch: _.deepValueSearch,\n    validateAll: true,\n    // Core method the walk through fields and their set of rules applying each one of them\n    validate(attrs, options = {}) {\n        options = _.defaults(options, {\n            validateAll: this.validateAll,\n            validations: {}\n        });\n        var error = [],\n            validations = _.result2(this, 'validations', options.validations, [attrs, options], this),\n            isRequired = {};\n\n        // walk through fields listed as required\n        for (let field in validations) {\n            isRequired[field] = true;\n            var value = this.deepValueSearch(field, attrs);\n            // working with array so we can validate lists like \"contacts[][email]\"\n            !_.isArray(value) && (value = [value]);\n\n            // walk through field rule specifications\n            for (let x in validations[field]) {\n                let validation = validations[field][x];\n\n                if (typeof validation === 'boolean') {\n                    isRequired[field] = validation;\n                    continue;\n                }\n\n                error = error.concat(this.validateValues(value, isRequired[field], options.validateAll, field, attrs, validation));\n            }\n\n            // validate fields specified as required but without rule specification\n            var firstValue = _.isArray(value) ? _.first(value) : value;\n            if ((!validations[field].length || (validations[field].length === 1 && typeof validations[field][0] === 'boolean')) &&\n                this.isRequiredNow(firstValue, isRequired[field], options.validateAll) &&\n                !this.validator().minLength(1).test(firstValue, attrs, field)) {\n                error.push([field, _.template(this.requiredErrorMessage)({\n                    field\n                })]);\n            }\n        }\n\n        return error.length > 0 ? error : null;\n    },\n    validateValues(value, isRequired, validateAll, field, attrs, validation) {\n        var error = [];\n        for (var x in value) {\n            error = error.concat(this.validateValue(x, value[x], isRequired, validateAll, field, attrs, validation));\n        }\n\n        return error;\n    },\n    validateValue(x, value, isRequired, validateAll, field, attrs, validation) {\n        var error = [];\n        let validationValue = this.getValidationValue(validation, value, attrs, field);\n        if (this.isRequiredNow(validationValue, isRequired, validateAll) &&\n            !this.isValid(field, attrs, validation[0], validationValue)) {\n            error.push([field, validation[1], x]);\n        }\n\n        return error;\n    },\n    getValidationValue(validation, value, attrs, field) {\n        if (!validation[2] || typeof validation[2] !== 'function') {\n            return value;\n        }\n        return validation[2](value, attrs, field);\n    },\n    // A field will be required when its present in the set of rules - even if its value is an empty [] - \n    // AND (its present in the values received OR (its set as required and validate all was set true)) . \n    // A bit confusing I know. But this will allow you to run validate in your form everytime a field is changed avoiding\n    // to alert of invalid fields that yet weren't filled by the guest\n    isRequiredNow(input, fieldRequired = false, validateAll) {\n        // the field will be required only if its value was sent or if its set as required (even without a specific rule)\n        return (typeof input !== 'undefined') || (!!fieldRequired && !!validateAll);\n    },\n    // Apply the rule test to value received. value, attrs inputted and field name are sent to validation method - it can be handy.\n    isValid(field, attrs, validation, value) {\n        if (!validation.test(value)) {\n            return false;\n        }\n        return true;\n    },\n    requiredErrorMessage: 'Field *{{field}}* cannot be empty'\n};\n\nexport default vl;\n"],"names":["vl","validator","deepValueSearch","validateAll","validate","attrs","options","_","defaults","this","validations","error","result2","isRequired","field","value","isArray","x","validation","concat","validateValues","firstValue","first","length","isRequiredNow","minLength","test","push","template","requiredErrorMessage","validateValue","validationValue","getValidationValue","isValid","input","fieldRequired"],"mappings":";;;;;;;;;;;yRAmEA,IAAIA,EAAK,CACLC,uDACAC,+DAAmBA,gBACnBC,aAAa,EAEbC,SAASC,EAAOC,EAAU,IACtBA,EAAUC,EAAEC,SAASF,EAAS,CAC1BH,YAAaM,KAAKN,YAClBO,YAAa,SAEbC,EAAQ,GACRD,EAAcH,EAAEK,QAAQH,KAAM,cAAeH,EAAQI,YAAa,CAACL,EAAOC,GAAUG,MACpFI,EAAa,OAGZ,IAAIC,KAASJ,EAAa,CAC3BG,EAAWC,IAAS,MAChBC,EAAQN,KAAKP,gBAAgBY,EAAOT,IAEvCE,EAAES,QAAQD,KAAWA,EAAQ,CAACA,QAG1B,IAAIE,KAAKP,EAAYI,GAAQ,KAC1BI,EAAaR,EAAYI,GAAOG,GAEV,kBAAfC,EAKXP,EAAQA,EAAMQ,OAAOV,KAAKW,eAAeL,EAAOF,EAAWC,GAAQR,EAAQH,YAAaW,EAAOT,EAAOa,IAJlGL,EAAWC,GAASI,MAQxBG,EAAad,EAAES,QAAQD,GAASR,EAAEe,MAAMP,GAASA,EAC/CL,EAAYI,GAAOS,SAAyC,IAA9Bb,EAAYI,GAAOS,QAAiD,kBAA1Bb,EAAYI,GAAO,MAC7FL,KAAKe,cAAcH,EAAYR,EAAWC,GAAQR,EAAQH,cACzDM,KAAKR,YAAYwB,UAAU,GAAGC,KAAKL,EAAYhB,EAAOS,IACvDH,EAAMgB,KAAK,CAACb,EAAOP,EAAEqB,SAASnB,KAAKoB,qBAAhBtB,CAAsC,CACrDO,MAAAA,aAKLH,EAAMY,OAAS,EAAIZ,EAAQ,MAEtCS,eAAeL,EAAOF,EAAYV,EAAaW,EAAOT,EAAOa,OACrDP,EAAQ,OACP,IAAIM,KAAKF,EACVJ,EAAQA,EAAMQ,OAAOV,KAAKqB,cAAcb,EAAGF,EAAME,GAAIJ,EAAYV,EAAaW,EAAOT,EAAOa,WAGzFP,GAEXmB,cAAcb,EAAGF,EAAOF,EAAYV,EAAaW,EAAOT,EAAOa,OACvDP,EAAQ,OACRoB,EAAkBtB,KAAKuB,mBAAmBd,EAAYH,EAAOV,EAAOS,UACpEL,KAAKe,cAAcO,EAAiBlB,EAAYV,KAC/CM,KAAKwB,QAAQnB,EAAOT,EAAOa,EAAW,GAAIa,IAC3CpB,EAAMgB,KAAK,CAACb,EAAOI,EAAW,GAAID,IAG/BN,GAEXqB,mBAAkB,CAACd,EAAYH,EAAOV,EAAOS,IACpCI,EAAW,IAA+B,mBAAlBA,EAAW,GAGjCA,EAAW,GAAGH,EAAOV,EAAOS,GAFxBC,EAQfS,cAAa,CAACU,EAAOC,GAAgB,EAAOhC,SAEf,IAAV+B,KAA6BC,KAAmBhC,EAGnE8B,QAAO,CAACnB,EAAOT,EAAOa,EAAYH,MACzBG,EAAWQ,KAAKX,GAKzBc,qBAAsB"}